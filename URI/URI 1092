#include <cstdio>
#include <algorithm>
#define MDIM 601
typedef std::pair<int,int> ii;
typedef std::pair<ii,int> iii;
typedef std::pair<ii,ii> iv; // v,h
int n, m;
int A[MDIM][MDIM], AUX[MDIM][MDIM], MAX[MDIM][MDIM];
iv join(int l, int r){	// Runtime error
	int m = (l+r)/2;
	int uh = 0, lh = 0, rv, lv;
	int muh, mlh, mrv, mlv;
	int marea = 0, area;
	int k = 0;
	while(k++ < n && AUX[k][m+1] <= 1){
		uh = k; lh = k;
	}
	if(k < n){
		rv = std::min(r,m+AUX[k][(n-1)-(m+1)]);
		lv = std::max(l,m-AUX[k][m]+1);
		marea = rv-lv+1;
		muh = uh; mlh = lh; mrv = rv; mlv = lv;
	} else {
		return iv(ii(-1,-1),ii(-1,-1));
	}
	for(int i = k; i < n; i++){
		if(AUX[i][m+1] > 1){
			int j;
			rv = std::min(rv,m+AUX[i][(n-1)-(m+1)]);
			for(j = lv; j <= m; j++){
				if(A[i-1][rv] < A[i][j])
					break;
			}
			if(j <= m){
				lh++;
				lv = std::max(lv,j);
				area = (rv-lv+1)*(lh-uh+1);
				if(area > marea){
					marea = area;
					muh = uh; mlh = lh; mrv = rv; mlv = lv;
				}
			} else {
				uh = i; lh = i;
			}
		} else {
			while(i++ < n && AUX[i][m+1] <= 1){
				uh = i; lh = i;
			}
			if(i < n){
				rv = std::min(r,m+AUX[i][(n-1)-(m+1)]);
				lv = std::max(l,m-AUX[i][m]+1);
				area = rv-lv+1;
				if(area > marea){
					marea = area;
					muh = uh; mlh = lh; mrv = rv; mlv = lv;
				}
			} else {
				return iv(ii(mlv,mrv),ii(muh,mlh));
			}
		}
	}
	return iv(ii(mlv,mrv),ii(muh,mlh));
}
ii get_h(int c){
	int up = 0, lo = 0, cnt = 1;
	int mlo = 0, mup = 0, max_ = 1;
	for(int i = 1; i < n; i++){
		if(A[i][c] > A[i-1][c]){
			cnt++; lo++;
			if(cnt > max_){
				max_ = cnt;
				mup = up;
				mlo = lo;
			}
		} else {
			up = i, lo = i;
			cnt = 1;
		}
	}
	return ii(mup,mlo);
}
iv get_max(int l, int r){
	ii h, v;	// Indices das linhas verticais e horizontais
	if(l == r){
		v.first = v.second = l;
		h = get_h(l);
		MAX[l][r] = h.second-h.first+1;
		return iv(v,h);
	} else {
		int al, ar, aj, amax;
		iv rl = get_max(l,(l+r)/2);
		iv rr = get_max((l+r)/2 + 1,r); // printf("%d\n",rr.first.first);
		al = (rl.first.second-rl.first.first+1)*(rl.second.second-rl.second.first+1);
		ar = (rr.first.second-rr.first.first+1)*(rr.second.second-rr.second.first+1);
		iv jnt = join(l,r);
		aj = (jnt.first.second-jnt.first.first+1)*(jnt.second.second-jnt.second.first+1);
		amax = std::max(al,std::max(ar,aj));
		MAX[l][r] = amax;
		if(amax == al)
			return rl;
		else if(amax == ar)
			return rr;
		else if(amax == aj)
			return  jnt;
		else return iv(ii(-1,-1),ii(-1,-1));
	}
}
int main() {
	while(scanf("%d %d",&n,&m)){
		if(n == 0 && m == 0)
			break;
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++){
				scanf("%d",&A[i][j]);
				if(j == 0) AUX[i][j] = 1;
				else if(A[i][j] > A[i][j-1]) AUX[i][j] = AUX[i][j-1]+1;
				else AUX[i][j] = 1;
			}
		get_max(0,m-1);
		for(int i = 0; i < m; i++){
			for(int j = 0; j < m; j++)
				printf("%d ", MAX[i][j]);
			printf("\n");
		}
		printf("\n");
	}
	return 0;
}
/*
3 5
1 2 3 7 8
5 6 4 7 8
1 1 5 1 1
*/

